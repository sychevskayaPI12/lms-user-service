/*
 * This file is generated by jOOQ.
 */
package com.anast.lms.generated.jooq.tables;


import com.anast.lms.generated.jooq.LmsUser;
import com.anast.lms.generated.jooq.tables.records.UserPasswordRecord;

import javax.annotation.Generated;

import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Name;
import org.jooq.Record;
import org.jooq.Schema;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.impl.DSL;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@Generated(
    value = {
        "http://www.jooq.org",
        "jOOQ version:3.11.11"
    },
    comments = "This class is generated by jOOQ"
)
@SuppressWarnings({ "all", "unchecked", "rawtypes" })
public class UserPassword extends TableImpl<UserPasswordRecord> {

    private static final long serialVersionUID = 1496592843;

    /**
     * The reference instance of <code>lms_user.user_password</code>
     */
    public static final UserPassword USER_PASSWORD = new UserPassword();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<UserPasswordRecord> getRecordType() {
        return UserPasswordRecord.class;
    }

    /**
     * The column <code>lms_user.user_password.id</code>.
     */
    public final TableField<UserPasswordRecord, Integer> ID = createField("id", org.jooq.impl.SQLDataType.INTEGER, this, "");

    /**
     * The column <code>lms_user.user_password.login</code>.
     */
    public final TableField<UserPasswordRecord, String> LOGIN = createField("login", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * The column <code>lms_user.user_password.password</code>.
     */
    public final TableField<UserPasswordRecord, String> PASSWORD = createField("password", org.jooq.impl.SQLDataType.VARCHAR, this, "");

    /**
     * Create a <code>lms_user.user_password</code> table reference
     */
    public UserPassword() {
        this(DSL.name("user_password"), null);
    }

    /**
     * Create an aliased <code>lms_user.user_password</code> table reference
     */
    public UserPassword(String alias) {
        this(DSL.name(alias), USER_PASSWORD);
    }

    /**
     * Create an aliased <code>lms_user.user_password</code> table reference
     */
    public UserPassword(Name alias) {
        this(alias, USER_PASSWORD);
    }

    private UserPassword(Name alias, Table<UserPasswordRecord> aliased) {
        this(alias, aliased, null);
    }

    private UserPassword(Name alias, Table<UserPasswordRecord> aliased, Field<?>[] parameters) {
        super(alias, null, aliased, parameters, DSL.comment(""));
    }

    public <O extends Record> UserPassword(Table<O> child, ForeignKey<O, UserPasswordRecord> key) {
        super(child, key, USER_PASSWORD);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public Schema getSchema() {
        return LmsUser.LMS_USER;
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserPassword as(String alias) {
        return new UserPassword(DSL.name(alias), this);
    }

    /**
     * {@inheritDoc}
     */
    @Override
    public UserPassword as(Name alias) {
        return new UserPassword(alias, this);
    }

    /**
     * Rename this table
     */
    @Override
    public UserPassword rename(String name) {
        return new UserPassword(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public UserPassword rename(Name name) {
        return new UserPassword(name, null);
    }
}
